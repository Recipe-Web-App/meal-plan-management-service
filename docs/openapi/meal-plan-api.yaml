openapi: 3.0.3
info:
  title: Meal Plan Management Service API
  description: API for managing meal plans, recipes, and nutritional tracking
  version: 1.0.0
  contact:
    name: Recipe Web App Team
servers:
  - url: http://localhost:3000/api/v1/meal-plan-management
    description: Local development server
  - url: https://api.recipe-app.com/api/v1/meal-plan-management
    description: Production server

tags:
  - name: meal-plans
    description: Meal plan management operations
  - name: health
    description: Health check and monitoring endpoints
  - name: metrics
    description: Prometheus metrics for monitoring and alerting
  - name: system
    description: System information and documentation endpoints

security:
  - bearerAuth: []

paths:
  /meal-plans:
    post:
      tags:
        - meal-plans
      summary: Create a new meal plan
      description: Creates a new meal plan for the authenticated user
      operationId: createMealPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMealPlanDto'
      responses:
        '201':
          description: Meal plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - meal-plans
      summary: List meal plans
      description: Retrieve a paginated list of meal plans with optional filters
      operationId: listMealPlans
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/IsActive'
        - $ref: '#/components/parameters/StartDateFrom'
        - $ref: '#/components/parameters/EndDateTo'
        - $ref: '#/components/parameters/NameSearch'
        - $ref: '#/components/parameters/DescriptionSearch'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
        - $ref: '#/components/parameters/IncludeRecipes'
        - $ref: '#/components/parameters/IncludeArchived'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of meal plans retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMealPlansResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /meal-plans/{id}:
    get:
      tags:
        - meal-plans
      summary: Get meal plan by ID
      description: Retrieve a specific meal plan with flexible viewing options and filters
      operationId: getMealPlanById
      parameters:
        - $ref: '#/components/parameters/MealPlanId'
        - name: viewMode
          in: query
          description: How to structure the response data
          schema:
            type: string
            enum: [full, day, week, month]
            default: full
        - name: filterDate
          in: query
          description: For 'day' view - specific date to retrieve
          schema:
            type: string
            format: date
            example: '2024-03-15'
        - name: filterStartDate
          in: query
          description: Start date for filtering (week view or custom range)
          schema:
            type: string
            format: date
        - name: filterEndDate
          in: query
          description: End date for custom date range filtering
          schema:
            type: string
            format: date
        - name: filterYear
          in: query
          description: Year for month view
          schema:
            type: integer
            minimum: 2020
            maximum: 2100
            example: 2024
        - name: filterMonth
          in: query
          description: Month number (1-12) for month view
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 3
        - name: mealType
          in: query
          description: Filter results by meal type
          schema:
            $ref: '#/components/schemas/MealType'
        - name: groupByMealType
          in: query
          description: Group results by meal type
          schema:
            type: boolean
            default: false
        - name: includeRecipes
          in: query
          description: Include full recipe details in response
          schema:
            type: boolean
            default: true
        - name: includeStatistics
          in: query
          description: Include meal statistics (useful for month view)
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Meal plan retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealPlanQueryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden - user does not own this meal plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - meal-plans
      summary: Update meal plan
      description: Update an existing meal plan's details
      operationId: updateMealPlan
      parameters:
        - $ref: '#/components/parameters/MealPlanId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMealPlanDto'
      responses:
        '200':
          description: Meal plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - meal-plans
      summary: Delete meal plan
      description: Permanently delete a meal plan and all associated recipes
      operationId: deleteMealPlan
      parameters:
        - $ref: '#/components/parameters/MealPlanId'
      responses:
        '204':
          description: Meal plan deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - health
      summary: Comprehensive health check
      description: Returns the overall health status of the meal plan management service
      operationId: getHealth
      responses:
        '200':
          description: Health check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
        '503':
          description: Service unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'

  /health/ready:
    get:
      tags:
        - health
      summary: Readiness probe
      description: Readiness probe for Kubernetes - indicates if service is ready to handle requests
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready or degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'

  /health/live:
    get:
      tags:
        - health
      summary: Liveness probe  
      description: Liveness probe for Kubernetes - indicates if service is alive
      operationId: getLiveness
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
        '503':
          description: Service not alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'

  /health/version:
    get:
      tags:
        - health
      summary: Get service version
      description: Get service version and environment information
      operationId: getVersion
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'

  /metrics:
    get:
      tags:
        - metrics
      summary: Get Prometheus metrics
      description: Returns application metrics in Prometheus format for monitoring and alerting systems like Prometheus and Grafana
      operationId: getMetrics
      responses:
        '200':
          description: Metrics data in Prometheus format
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP meal_plan_service_http_requests_total Total number of HTTP requests
                  # TYPE meal_plan_service_http_requests_total counter
                  meal_plan_service_http_requests_total{method="GET",route="/api/v1/meal-plans",status_code="200"} 45
                  
                  # HELP meal_plan_service_meal_plans_created_total Total number of meal plans created  
                  # TYPE meal_plan_service_meal_plans_created_total counter
                  meal_plan_service_meal_plans_created_total{user_id="user123"} 12

  /docs:
    get:
      tags:
        - system
      summary: Interactive API documentation
      description: Swagger UI for exploring and testing the API interactively
      operationId: getSwaggerUI
      responses:
        '200':
          description: Interactive Swagger UI
          content:
            text/html:
              schema:
                type: string
                description: HTML page with interactive API documentation

  /docs-json:
    get:
      tags:
        - system
      summary: OpenAPI JSON schema
      description: Raw OpenAPI specification in JSON format for programmatic access
      operationId: getOpenAPIJson
      responses:
        '200':
          description: OpenAPI specification in JSON format
          content:
            application/json:
              schema:
                type: object
                description: Complete OpenAPI 3.0 specification

  /info:
    get:
      tags:
        - system
      summary: Service information
      description: Basic service information including version, environment, and runtime details
      operationId: getServiceInfo
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'

  /config:
    get:
      tags:
        - system
      summary: Safe configuration values
      description: Non-sensitive configuration values for debugging and verification. Sensitive values like secrets and passwords are excluded.
      operationId: getConfiguration
      responses:
        '200':
          description: Safe configuration values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafeConfiguration'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    MealPlanId:
      name: id
      in: path
      required: true
      description: Meal plan ID
      schema:
        type: string
        example: '123'

    UserId:
      name: userId
      in: query
      description: User ID to filter by
      schema:
        type: string
        format: uuid

    IsActive:
      name: isActive
      in: query
      description: Filter by active status
      schema:
        type: boolean

    StartDateFrom:
      name: startDateFrom
      in: query
      description: Filter meal plans starting from this date
      schema:
        type: string
        format: date

    EndDateTo:
      name: endDateTo
      in: query
      description: Filter meal plans ending before this date
      schema:
        type: string
        format: date

    NameSearch:
      name: nameSearch
      in: query
      description: Search term for meal plan name
      schema:
        type: string

    DescriptionSearch:
      name: descriptionSearch
      in: query
      description: Search term for meal plan description
      schema:
        type: string

    SortBy:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string
        enum: [name, startDate, endDate, createdAt, updatedAt]
        default: createdAt

    SortOrder:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc

    IncludeRecipes:
      name: includeRecipes
      in: query
      description: Include recipe details in response
      schema:
        type: boolean
        default: false

    IncludeArchived:
      name: includeArchived
      in: query
      description: Include archived meal plans
      schema:
        type: boolean
        default: false

    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    MealType:
      type: string
      enum:
        - BREAKFAST
        - LUNCH
        - DINNER
        - SNACK
        - DESSERT

    CreateMealPlanDto:
      type: object
      required:
        - name
        - startDate
        - endDate
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the meal plan
          example: Weekly Meal Prep
        description:
          type: string
          maxLength: 1000
          description: Optional description of the meal plan
          example: Healthy meals for the week
        startDate:
          type: string
          format: date
          description: Start date of the meal plan
          example: '2024-03-11'
        endDate:
          type: string
          format: date
          description: End date of the meal plan
          example: '2024-03-17'
        isActive:
          type: boolean
          description: Whether the meal plan is currently active
          default: true
        userId:
          type: string
          format: uuid
          description: User ID (typically set from authentication context)
        recipes:
          type: array
          description: Optional list of recipes to add when creating the meal plan
          items:
            $ref: '#/components/schemas/CreateMealPlanRecipeDto'

    UpdateMealPlanDto:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Updated name of the meal plan
        description:
          type: string
          maxLength: 1000
          description: Updated description
        startDate:
          type: string
          format: date
          description: Updated start date
        endDate:
          type: string
          format: date
          description: Updated end date

    CreateMealPlanRecipeDto:
      type: object
      required:
        - recipeId
        - day
        - mealType
      properties:
        recipeId:
          type: string
          format: uuid
          description: ID of the recipe to add
          example: '550e8400-e29b-41d4-a716-446655440000'
        day:
          type: integer
          minimum: 1
          maximum: 7
          description: Day of the week (1=Monday, 7=Sunday)
          example: 3
        mealType:
          $ref: '#/components/schemas/MealType'
        servings:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of servings
          default: 1
        notes:
          type: string
          maxLength: 500
          description: Optional notes for this meal
          example: Double the portion for guests

    MealPlanResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Meal plan ID
          example: '123'
        userId:
          type: string
          format: uuid
          description: User ID who owns this meal plan
        name:
          type: string
          description: Name of the meal plan
        description:
          type: string
          nullable: true
          description: Description of the meal plan
        startDate:
          type: string
          format: date
          description: Start date of the meal plan
        endDate:
          type: string
          format: date
          description: End date of the meal plan
        isActive:
          type: boolean
          description: Whether the meal plan is currently active
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/MealPlanRecipeResponseDto'
          description: List of recipes in this meal plan
        recipeCount:
          type: integer
          description: Total number of recipes
          example: 21
        durationDays:
          type: integer
          description: Duration of the meal plan in days
          example: 7

    MealPlanRecipeResponseDto:
      type: object
      properties:
        mealPlanRecipeId:
          type: string
          description: Meal plan recipe ID
          example: '1'
        mealPlanId:
          type: string
          description: Meal plan ID
          example: '123'
        recipeId:
          type: string
          description: Recipe ID
          example: '456'
        mealDate:
          type: string
          format: date
          description: Meal date
        mealType:
          $ref: '#/components/schemas/MealType'
        servings:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of servings
          example: 4
        notes:
          type: string
          nullable: true
          description: Additional notes
          example: 'Prepare the night before'
        createdAt:
          type: string
          format: date-time
          description: Created at timestamp
        updatedAt:
          type: string
          format: date-time
          description: Updated at timestamp

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false

    PaginatedMealPlansResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/MealPlanResponseDto'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    MealPlanQueryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        viewMode:
          type: string
          enum: [full, day, week, month]
          description: The view mode used for this response
        data:
          oneOf:
            - $ref: '#/components/schemas/MealPlanResponseDto'
            - $ref: '#/components/schemas/DayViewResponse'
            - $ref: '#/components/schemas/WeekViewResponse'
            - $ref: '#/components/schemas/MonthViewResponse'
        statistics:
          $ref: '#/components/schemas/MealPlanStatistics'
          description: Optional statistics (when includeStatistics=true)

    DayViewResponse:
      type: object
      properties:
        mealPlanId:
          type: string
        mealPlanName:
          type: string
        date:
          type: string
          format: date
        meals:
          type: object
          properties:
            breakfast:
              type: array
              items:
                $ref: '#/components/schemas/MealPlanRecipeResponseDto'
            lunch:
              type: array
              items:
                $ref: '#/components/schemas/MealPlanRecipeResponseDto'
            dinner:
              type: array
              items:
                $ref: '#/components/schemas/MealPlanRecipeResponseDto'
            snack:
              type: array
              items:
                $ref: '#/components/schemas/MealPlanRecipeResponseDto'
            dessert:
              type: array
              items:
                $ref: '#/components/schemas/MealPlanRecipeResponseDto'
        totalMeals:
          type: integer

    WeekViewResponse:
      type: object
      properties:
        mealPlanId:
          type: string
        mealPlanName:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        weekNumber:
          type: integer
        days:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              dayOfWeek:
                type: string
                enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
              meals:
                type: object
                properties:
                  breakfast:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealPlanRecipeResponseDto'
                  lunch:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealPlanRecipeResponseDto'
                  dinner:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealPlanRecipeResponseDto'
                  snack:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealPlanRecipeResponseDto'
                  dessert:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealPlanRecipeResponseDto'
              totalMeals:
                type: integer
        totalMeals:
          type: integer

    MonthViewResponse:
      type: object
      properties:
        mealPlanId:
          type: string
        mealPlanName:
          type: string
        year:
          type: integer
        month:
          type: integer
        monthName:
          type: string
        weeks:
          type: array
          items:
            type: object
            properties:
              weekNumber:
                type: integer
              startDate:
                type: string
                format: date
              endDate:
                type: string
                format: date
              days:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    dayOfMonth:
                      type: integer
                    isCurrentMonth:
                      type: boolean
                    mealCount:
                      type: integer
                    meals:
                      type: object
                      properties:
                        breakfast:
                          type: integer
                        lunch:
                          type: integer
                        dinner:
                          type: integer
                        snack:
                          type: integer
                        dessert:
                          type: integer
        totalMeals:
          type: integer

    MealPlanStatistics:
      type: object
      properties:
        averageMealsPerDay:
          type: number
          format: float
        mostFrequentMealType:
          $ref: '#/components/schemas/MealType'
        daysWithMeals:
          type: integer
        totalRecipes:
          type: integer
        mealTypeBreakdown:
          type: object
          properties:
            breakfast:
              type: integer
            lunch:
              type: integer
            dinner:
              type: integer
            snack:
              type: integer
            dessert:
              type: integer

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/MealPlanResponseDto'
        message:
          type: string
          example: Meal plan created successfully


    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
              example: Validation failed
            code:
              type: string
              example: VALIDATION_ERROR
            details:
              type: array
              items:
                type: string
              example:
                - Name must be at least 1 character long
                - End date must be after start date

    HealthCheckResult:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error, shutting_down]
          description: Overall health status
        info:
          type: object
          additionalProperties: true
          description: Health information for services that are up
        error:
          type: object
          additionalProperties: true
          description: Health information for services that are down
        details:
          type: object
          additionalProperties: true
          description: All health information
      example:
        status: ok
        info:
          database:
            status: up
          memory_heap:
            status: up
        error: {}
        details:
          database:
            status: up
          memory_heap:
            status: up

    VersionInfo:
      type: object
      properties:
        version:
          type: string
          description: Service version
          example: "1.0.0"
        environment:
          type: string
          description: Current environment
          example: "development"
        timestamp:
          type: string
          description: Current timestamp
          example: "2024-01-15T10:30:00Z"

    ServiceInfo:
      type: object
      properties:
        name:
          type: string
          example: "Meal Plan Management Service"
        version:
          type: string
          example: "1.0.0"
        description:
          type: string
          example: "API for managing meal plans, recipes, and nutritional tracking"
        environment:
          type: string
          example: "development"
        uptime:
          type: number
          description: Service uptime in seconds
          example: 3600.5
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00Z"
        nodeVersion:
          type: string
          example: "v18.17.0"
        platform:
          type: string
          example: "linux"
        arch:
          type: string
          example: "x64"
        memory:
          type: object
          properties:
            used:
              type: number
              description: Used heap memory in MB
              example: 45
            total:
              type: number
              description: Total heap memory in MB
              example: 128
            external:
              type: number
              description: External memory in MB
              example: 12
        pid:
          type: number
          description: Process ID
          example: 12345

    SafeConfiguration:
      type: object
      properties:
        environment:
          type: string
          example: "development"
        port:
          type: number
          example: 3000
        logLevel:
          type: string
          example: "info"
        corsOrigins:
          type: array
          items:
            type: string
          example: ["http://localhost:3000"]
        rateLimit:
          type: object
          properties:
            ttl:
              type: number
              description: Rate limit window in milliseconds
              example: 60000
            limit:
              type: number
              description: Maximum requests per window
              example: 100
        database:
          type: object
          properties:
            maxRetries:
              type: number
              example: 5
            retryDelay:
              type: number
              example: 5000
            healthCheckInterval:
              type: number
              example: 30000
            logQueries:
              type: boolean
              example: false
        oauth2:
          type: object
          properties:
            serviceEnabled:
              type: boolean
              example: true
            serviceToServiceEnabled:
              type: boolean
              example: true
            introspectionEnabled:
              type: boolean
              example: false
            clientId:
              type: string
              example: "meal-plan-service"
        logging:
          type: object
          properties:
            level:
              type: string
              example: "info"
            consoleFormat:
              type: string
              example: "pretty"
            fileEnabled:
              type: boolean
              example: false
            maxSize:
              type: string
              example: "20m"
            maxFiles:
              type: string
              example: "14d"

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflict - resource already exists or dates overlap
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'